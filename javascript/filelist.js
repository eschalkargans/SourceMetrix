/**
 * @file filelist.js
 * @copyright (c) 2020 Marc Stoerzel
 * 
 * Functions to create DOM elements to represent a filelist based on data, which need to be 
 * defined as global value 'combined' in some other script.
 * Idea is to have 'combined' created as auto generated code by running metrix++.py --export
 * and some code generation script.
 */

/**
 * Entries of a filelist are considered tuples of {text, value}.
 * @tparam string text text associated with this entry
 * @param value value associated with this entry
 */
function FilelistEntry(text, value)
{
    this.text = text;
    this.value = value;
}

/**
 * Create a filelist by filtering 'combined' based on criteria in combined's column col.
 * @param {in} col Column within combined which holds the values the fillist will contain as criteria
 */
function createFilelist(col)
{
    filelist = new Array;

    for (var i = 0; i < combined.length; i++)
    {
        if (filelist.length == 0) {
            filelist.push(new FilelistEntry(combined[i][0],  combined[i][col]));
        } else {
            if (filelist[filelist.length-1].text == combined[i][0]) {
                // we already know this file and add col
                if (!isNaN(combined[i][col])) {
                    filelist[filelist.length-1].value += combined[i][col];
                }
            } else {
                filelist.push(new FilelistEntry(combined[i][0],  combined[i][col]));
            }
        }
        // autogenerated combined array may contain empty entries; count those as 0
        if (isNaN(filelist[filelist.length-1].value)) {
            filelist[filelist.length-1].value = 0;
        }
    }
}

/**
 * Create the filelist entries by creating a div with classname "tooltip" shwowing "text" 
 * and having a partial filled background
 * @param {in} text Text to show up
 * @param {in} fillPercent Position (from left to right) up to fill background
 * @param {in} value Tooltip text to show
 */
function createElement(text, fillPercent, value, color, tooltipLabel){
    var container = document.getElementById('filelist_body');
    var newElm = document.createElement('div');
    newElm.innerText = text;
    newElm.className = "tooltip";
    newElm.style = "background-image: linear-gradient(90deg, " + color + " 0%," + color + " " + fillPercent + "%,rgba(0,0,0,0) " + fillPercent + "%)";
    newElm.addEventListener('click', function () {document.getElementById('details_wrapper').setAttribute('src', "." + text + ".html")});
    var elmTooltip = document.createElement('span');
    elmTooltip.innerHTML = tooltipLabel + " <b>" + value + "</b>";
    elmTooltip.setAttribute('role', 'tooltip');
    newElm.appendChild(elmTooltip);
    container.appendChild(newElm);

}
// use of global variables as I don't know how to pass additional paramters to sort function
var order = 1;

function sortFuncAlphabetic(a, b)
{
    var relation;

    if (a.text < b.text) relation = -1 
    else if (b.text < a.text) relation = 1
    else relation = 0;

    return (order * relation);
}

function sortFuncNumeric(a, b)
{
    var relation;

    if (a.value < b.value) relation = -1 
    else if (b.value < a.value) relation = 1
    else relation = 0;

    return (order * relation);
}

function clearFilelist_body()
{
    var container = document.getElementById('filelist_body');
    container.textContent = '';
}

var filelist_body_color;
var filelist_body_tooltip;
/**
 * For each entry in the array filelist dynamically create a DOM element.
 */
function populateFilelist_body(color, tooltipLabel)
{
    var max = 0
    for (var i = 0; i < filelist.length; i++) 
    {
        if (filelist[i].value > max) max = filelist[i].value 
    }
    for (var i = 0; i < filelist.length; i++) 
    {
        createElement(filelist[i].text, Math.round(filelist[i].value / max * 100), filelist[i].value, color, tooltipLabel);
    }
    filelist_body_color = color;
    filelist_body_tooltip = tooltipLabel; 
}

function showAlphabetic()
{
    clearFilelist_body();
    filelist.sort(sortFuncAlphabetic);
    populateFilelist_body(filelist_body_color, filelist_body_tooltip);
    order = order * -1;
    elem = document.getElementById("sortAlphabetic");
    if (order > 0)
    {
        elem.innerHTML = "sort by name &#x25BE";
    } else {
        elem.innerHTML = "sort by name &#x25B4";
    }
}
function showNumeric()
{
    clearFilelist_body();
    filelist.sort(sortFuncNumeric);
    populateFilelist_body(filelist_body_color, filelist_body_tooltip);
    order = order * -1;
    elem = document.getElementById("sortAlphabetic");
    if (order > 0)
    {
        elem.innerHTML = "sort by metric &#x25BE";
    } else {
        elem.innerHTML = "sort by metric &#x25B4";
    }
}
